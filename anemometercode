#include <Arduino.h>

const byte PulsesPerRevolution = 2; // Set how many pulses there are on each revolution. Default: 2.
const unsigned long ZeroTimeout = 100000; // For high response time, a good value would be 100000.
const byte numReadings = 2; // Number of samples for smoothing. The higher, the more smoothing, but it's going to

volatile unsigned long LastTimeWeMeasured; // Stores the last time we measured a pulse so we can calculate the period.
volatile unsigned long PeriodBetweenPulses = ZeroTimeout + 1000; // Stores the period between pulses in microseconds.
volatile unsigned long PeriodAverage = ZeroTimeout + 1000; // Stores the period between pulses in microseconds in total, if we are taking multiple pulses.
unsigned long FrequencyRaw; // Calculated frequency, based on the period. This has a lot of extra decimals without the decimal point.
unsigned long FrequencyReal; // Frequency without decimals.
unsigned long RPM; // Raw RPM without any processing.
unsigned int PulseCounter = 1; // Counts the amount of pulse readings we took so we can average multiple pulses before calculating the period.
unsigned long PeriodSum; // Stores the summation of all the periods to do the average.
unsigned long LastTimeCycleMeasure = LastTimeWeMeasured; // Stores the last time we measure a pulse in that cycle.
unsigned long CurrentMicros = micros(); // Stores the micros in that cycle.
unsigned int AmountOfReadings = 1;

unsigned int ZeroDebouncingExtra; // Stores the extra value added to the ZeroTimeout to debounce it.
unsigned long readings[numReadings]; // The input.
unsigned long readIndex; // The index of the current reading.
unsigned long total; // The running total.
unsigned long average; // The RPM value after applying the smoothing.

void ICACHE_RAM_ATTR Pulse_Event() // The interrupt runs this to calculate the period between pulses:
{
  PeriodBetweenPulses = micros() - LastTimeWeMeasured; // Current "micros" minus the old "micros" when the last pulse happens.
  LastTimeWeMeasured = micros(); // Stores the current micros so the next time we have a pulse we would have something to compare with.

  if (PulseCounter >= AmountOfReadings) // If the counter for the amount of readings reaches the set limit:
  {
    PeriodAverage = PeriodSum / AmountOfReadings; // Calculate the final period by dividing the sum of all readings by the number of readings.
    PulseCounter = 1; // Reset the counter to start over. The reset value is 1 because it's the minimum setting allowed (1 reading).
    PeriodSum = PeriodBetweenPulses; // Reset PeriodSum to start a new averaging operation.
    int RemappedAmountOfReadings = map(PeriodBetweenPulses, 40000, 5000, 1, 10); // Remap the period range to the reading range.
    RemappedAmountOfReadings = constrain(RemappedAmountOfReadings, 1, 10); // Constrain the value so it doesn't go below or above the limits.
    AmountOfReadings = RemappedAmountOfReadings; // Set the amount of readings as the remapped value.
  }
  else
  {
    PulseCounter++; // Increase the counter for the amount of readings by 1.
    PeriodSum = PeriodSum + PeriodBetweenPulses; // Add the periods so later we can average.
  }
}

void setup() // Start of setup:
{
  Serial.begin(9600); // Begin serial communication.
  attachInterrupt(digitalPinToInterrupt(0), Pulse_Event, RISING); // Enable the interruption on pin 2 when going from LOW to HIGH.
  delay(1000); // We sometimes take several readings of the period to average. Since we don't have any readings
}

void loop() // Start of loop:
{
  LastTimeCycleMeasure = LastTimeWeMeasured; // Store the LastTimeWeMeasured in a variable.
  CurrentMicros = micros(); // Store the micros() in a variable.
  if (CurrentMicros < LastTimeCycleMeasure)
  {
    LastTimeCycleMeasure = CurrentMicros;
  }

  FrequencyRaw = 10000000000 / PeriodAverage; // Calculate the frequency using the period between pulses.
  if (PeriodBetweenPulses > ZeroTimeout - ZeroDebouncingExtra || CurrentMicros - LastTimeCycleMeasure > ZeroTimeout - ZeroDebouncingExtra)
  { // If the pulses are too far apart that we reached the timeout for zero:
    FrequencyRaw = 0; // Set frequency as 0.
    ZeroDebouncingExtra = 2000; // Change the threshold a little so it doesn't bounce.
  }
  else
  {
    ZeroDebouncingExtra = 0; // Reset the threshold to the normal value so it doesn't bounce.
  }

  FrequencyReal = FrequencyRaw / 10000; // Get frequency without decimals.
  RPM = FrequencyRaw / PulsesPerRevolution * 60; // Frequency divided by the number of pulses per revolution, then multiplied by 60.
  RPM = RPM / 10000; // Remove the decimals.
  total = total - readings[readIndex]; // Advance to the next position in the array.
  readings[readIndex] = RPM; // Takes the value that we are going to smooth.
  total = total + readings[readIndex]; // Add the reading to the total.
  readIndex = readIndex + 1; // Advance to the next position in the array.
  if (readIndex >= numReadings) // If we're at the end of the array:
  {
    readIndex = 0; // Reset the array index.
  }
  average = total / numReadings; // The average value is the smoothed result.
  Serial.print("Period: ");
  Serial.print(PeriodBetweenPulses);
  Serial.print("\tReadings: ");
  Serial.print(AmountOfReadings);
  Serial.print("\tFrequency: ");
  Serial.print(FrequencyReal);
  Serial.print("\tRPM: ");
  Serial.print(RPM);
  Serial.print("\tTachometer: ");
  Serial.println(average);
}
